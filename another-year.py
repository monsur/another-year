import os
import datetime

from optparse import OptionParser
from rdio import Rdio
try:
  import json
except ImportError:
  import simplejson as json

FILENAME = 'datastore.txt'

def load_store(filename=FILENAME):
  if os.path.exists(filename):
    f = open(filename, 'r')
    str_contents = f.read()
    f.close()
    return json.loads(str_contents)
  else:
    return {}

def write_store(store, filename=FILENAME):
    f = open(filename, 'w')
    f.write(json.dumps(store))
    f.close()

def get_current_year():
  return datetime.datetime.now().year

def get_rdio_date(release_date_str):
  parts = release_date_str.split('-')
  return datetime.date(int(parts[0]), int(parts[1]), int(parts[2]))

def get_albums(rdio, year, last_run):
  count = 20
  if last_run == None:
    count = 100
  
  params = {}
  params['sort'] = 'dateAdded'
  params['extras'] = 'trackKeys'
  params['count'] = count
  params['start'] = 0

  albums = []
  latest = None
  results = rdio.call('getAlbumsInCollection', params)['result']
  while True:
    if len(results) == 0:
      return albums, latest

    for result in results:
      if latest == None:
        latest = result['albumKey']

      if last_run == result['albumKey']:
        return albums, latest

      release_date = get_rdio_date(result['releaseDate'])
      if release_date.year == year:
        albums.append(result)

    params['start'] = params['start'] + count
    results = rdio.call('getAlbumsInCollection', params)['result']

def get_existing_tracks(tracks):
  existing_tracks = {}
  for track in tracks:
    existing_tracks[track] = True
  return existing_tracks

def add_to_playlist(rdio, year, albums):

  name = 'My %s' % year
  params = {}
  params['extras'] = 'trackKeys'
  playlists = rdio.call('getPlaylists', params)['result']['owned']
  current = None
  existing_tracks = {}

  for playlist in playlists:
    if playlist['name'] == name:
      current = playlist
      existing_tracks = get_existing_tracks(current['trackKeys'])
      print 'Found existing playlist with %s tracks' % len(current['trackKeys'])
      break

  tracks = []
  for album in albums:
    for track in album['trackKeys']:
      if track not in existing_tracks:
        tracks.append(track)

  if len(tracks) == 0:
    return

  tracks_str = ','.join(tracks)

  params = {}
  if current == None:
    print 'Creating new playlist named "%s"' % name
    params['name'] = name
    params['description'] = 'Tracks in my collection from the year %s. Generated by http://github.com/monsur/another-year' % year
    params['tracks'] = tracks_str
    print 'Adding %s tracks' % str(len(tracks))
    rdio.call('createPlaylist', params)
  else:
    print 'Adding tracks to existing playlist'
    params['playlist'] = current['key']
    params['tracks'] = tracks_str
    rdio.call('addToPlaylist', params)

def run(options):
  store = load_store()
  token = None
  if 'token' in store:
    token = (store.get('token'), store.get('token_secret'))
  rdio = Rdio((options.key, options.secret), token)

  if rdio.token == None:
    # No token, log in
    url = rdio.begin_authentication('oob')
    print 'Go to: ' + url
    verifier = raw_input('Then enter the code: ').strip()
    rdio.complete_authentication(verifier)
    # TODO: Why aren't saved tokens working?
    #token, token_secret = rdio.token
    #store['token'] = token
    #store['token_secret'] = token_secret
    #write_store(store)

  year = options.year
  if year == None:
    year = get_current_year()
  year_key = str(year)

  last_run = None
  if year_key in store:
    last_run = store.get(year_key)

 
  print 'Loading albums'
  albums, last_run = get_albums(rdio, year, last_run)
  print 'Loaded %s new albums to add' % len(albums)

  if len(albums) > 0:
    add_to_playlist(rdio, year, albums)

  store[year_key] = last_run
  write_store(store)


if __name__=="__main__":  
  parser = OptionParser()
  parser.add_option("--consumer_key", dest="key", type="string",
                    help="Rdio consumer key")
  parser.add_option("--consumer_secret", dest="secret", type="string",
                    help="Rdio consumer secret")
  parser.add_option("--year", dest="year", type="int",
                    help="The year to generate a playlist for. Defaults to the current year")
  (options, args) = parser.parse_args()
  run(options)

